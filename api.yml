openapi: 3.0.3
info:
  title: Steam Library API
  description: API for pulling game data from MongoDB
  version: "1.0"
servers:
- url: /app/v1/api
paths:
  /gamesLibrary:
    get:
      summary: Get the entire library
      description: Returns a JSON Object of the user's entire Steam library
      operationId: get_games_library
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gamesLibrary'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_get
  /gamesLibrary/{title}:
    get:
      summary: Get a single game
      description: Returns the record of a game in the library
      parameters:
        - $ref: '#/components/parameters/titleParam'
      operationId: get_game
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_get
  # /gamesLibrary/search/{title}:
  # /gamesLibrary/search/{genre}:
  # /gamesLibrary/search/{date}":
  # /gamesLibrary/search/{dateRange}:
  # /gamesLibrary/search/{publisher}:
components:
  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        title:
          type: string
        type:
          type: string
      required:
        - detail
        - status
        - title
        - type
    400BadRequestError:
      description: The request could not be understood by the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: The browser (or proxy) sent a request that this server could not understand.
            status: 400
            title: Bad Request
            type: about:blank
    404NotFoundError:
      description: The requested resource could not be found on the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: The browser (or proxy) sent a request that this server could not understand.
            status: 400
            title: Bad Request
            type: about:blank
    500InternalServerError:
      description: The server was unresponsive
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            detail: >-
              The server was unable to send a response. Please check with your web administrator for resolution. 
            status: 404
            title: Internal Server Error
            type: about:blank
    DefaultError:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    gamesLibrary:
      allOf:
        - type: object
          properties:
            count:
              type: integer
              description: The total number of games in the library
              readOnly: true
        - $ref: '#/components/schemas/game'

    game:
      type: object
      properties:
        title:
          type: string
          description: The name of the game
          readOnly: true
        genre:
          type: array
          description: The genres to which the game belongs
          readOnly: true
        publisher:
          type: string
          description: The name of the publisher(s)
          readOnly: true
        yearOfPublication:
          type: string
          description: The year the game was published
          readOnly: true
        tags:
          type: array
          description: Custom tags to add to the record for searching
          readOnly: false
  parameters:
    titleParam:
      name: title
      description: The name of a game
      in: path
      required: true
      schema:
        type: string
      example: Hello Kitty Island Adventure
