openapi: 3.0.3
info:
  title: Steam Library API
  description: API for pulling game data from MongoDB
  version: "1.0"
servers:
- url: /app/v1/api
paths:
  /gamesLibrary:
    get:
      summary: Get the entire library
      description: Returns a JSON Object of the user's entire Steam library
      operationId: get_games_library
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gamesLibrary'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_get
  /gamesLibrary/{title}:
    get:
      summary: Get a single game
      description: Returns the record of a game in the library
      operationId: get_game
      parameters:
      - name: title
        in: path
        description: The name of a game
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: Hello Kitty Island Adventure
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_get
  /gamesLibrary/search/title/{title}:
    get:
      summary: Get a single game
      description: Returns the record of a game in the library
      operationId: search_game_title
      parameters:
      - name: title
        in: path
        description: The name of a game
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: Hello Kitty Island Adventure
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_search
  /gamesLibrary/search/{genre}:
    get:
      summary: Get a single game
      description: Returns the record of a game in the library
      operationId: search_game_genre
      parameters:
      - name: genres
        in: path
        description: The genres of a game
        required: true
        style: simple
        explode: false
        schema:
          type: array
        example: action
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_search
  /gamesLibrary/search/{date}:
    get:
      summary: Get a single game
      description: Returns the record of a game in the library
      operationId: search_game_date
      parameters:
      - name: date
        in: path
        description: The date a game was published
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1-1-1970
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_search
  /gamesLibrary/search/{dateRange}:
    get:
      summary: Get a single game
      description: Returns the record of a game in the library
      operationId: search_game_date_range
      parameters:
      - name: dateRangeStart
        in: path
        description: The date range a game was published
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "1900"
      - name: dateRangeEnd
        in: path
        description: The date range a game was published
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: "1901"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_search
  /gamesLibrary/search/{publisher}:
    get:
      summary: Get a single game
      description: Returns the record of a game in the library
      operationId: search_game_publisher
      parameters:
      - name: publisher
        in: path
        description: The publisher of a game
        required: true
        style: simple
        explode: false
        schema:
          type: array
        example: Contoso
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
                x-content-type: application/json
        "400":
          $ref: '#/components/schemas/400BadRequestError'
        "404":
          $ref: '#/components/schemas/404NotFoundError'
        "500":
          $ref: '#/components/schemas/500InternalServerError'
      x-openapi-router-controller: swagger_server.controllers.games_search
components:
  schemas:
    Error:
      required:
      - detail
      - status
      - title
      - type
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        title:
          type: string
        type:
          type: string
    "400BadRequestError":
      description: The request could not be understood by the server
    "404NotFoundError":
      description: The requested resource could not be found on the server
    "500InternalServerError":
      description: The server was unresponsive
    DefaultError:
      description: Unexpected Error
    gamesLibrary:
      allOf:
      - type: object
        properties:
          count:
            type: integer
            description: The total number of games in the library
            readOnly: true
          games:
            type: array
            properties: {}
    game:
      type: object
      properties:
        title:
          type: string
          description: The name of the game
          readOnly: true
        genres:
          type: array
          description: The genres to which the game belongs
          readOnly: true
        publishers:
          type: array
          description: The name of the publisher(s)
          readOnly: true
        yearOfPublication:
          type: string
          description: The year the game was published
          readOnly: true
        tags:
          type: array
          description: Custom tags to add to the record for searching
          readOnly: false
      example:
        yearOfPublication: yearOfPublication
        genres: ""
        publishers: ""
        title: title
        tags: ""
  parameters:
    titleParam:
      name: title
      in: path
      description: The name of a game
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: Hello Kitty Island Adventure
    genreParam:
      name: genres
      in: path
      description: The genres of a game
      required: true
      style: simple
      explode: false
      schema:
        type: array
      example: action
    dateParam:
      name: date
      in: path
      description: The date a game was published
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: 1-1-1970
    dateRangeStartParam:
      name: dateRangeStart
      in: path
      description: The date range a game was published
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: "1900"
    dateRangeEndParam:
      name: dateRangeEnd
      in: path
      description: The date range a game was published
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: "1901"
    publisherParam:
      name: publisher
      in: path
      description: The publisher of a game
      required: true
      style: simple
      explode: false
      schema:
        type: array
      example: Contoso

